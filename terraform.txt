1)main.tf:
# Create a VPC
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support = true

  tags = {
    Name = "main-vpc"
  }
}
# Create an Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}


# Associate the route table with the public subnet
resource "aws_route_table_association" "public_subnet_assoc" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_rt.id
}


# Create a Route Table for the public subnet
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id  # Route to Internet Gateway
  }

  tags = {
    Name = "public-route-table"
  }
}


# Create a public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "public-subnet"
  }
}

# Create a security group with RDP access
resource "aws_security_group" "rdp_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 3389
    to_port     = 3389
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Change this to restrict access
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rdp-sg"
  }
}

# Create an EC2 instance running Windows Server
resource "aws_instance" "windows_server" {
  ami           = "ami-0888db1202897905c"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public_subnet.id
  vpc_security_group_ids = [aws_security_group.rdp_sg.id]  # Use security_group_ids instead
  availability_zone = "us-east-1a"
  associate_public_ip_address = true

  tags = {
    Name = "windows-server"
  }

# Use user_data to install Python, Java, and run a Python script
  user_data = <<-EOF
    <powershell>
    # Install Chocolatey - Windows package manager
    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
   
    # Install Python
    choco install python -y
   
    # Install Java
    choco install jdk8 -y
   
    # Create a Python script
    New-Item -Path C:\\scripts -ItemType Directory
    Set-Content -Path C:\\scripts\\simple_math.py -Value 'print("Sum of 5 + 3 =", 5 + 3)'
   
    # Run the Python script
    python C:\\scripts\\simple_math.py > C:\\scripts\\output.txt
    </powershell>
  EOF
 

  # Optional: Key pair for SSH access
  key_name = "us-east-1-KP" # Update with your key pair name

}
output "instance_public_ip" {
  value = aws_instance.windows_server.public_ip
}

2)provider.tf:
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.68"  # Replace with the latest compatible version
    }
  }
  required_version = ">= 1.0.0"  # Replace with your Terraform version
}


provider "aws" {
  region = "us-east-1"  # Change this to your preferred region
}



